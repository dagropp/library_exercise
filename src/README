Daniel Gropp

(Created for HUJI course "Intro to OOP" - exercise 1 - March, 2019)

=============================
=      File description     =
=============================
Book.java -     This class represents a book, which has a title, author, year of publication and different
                literary aspects.
Patron.java -   This class represents a library patron that has a name and assigns values to different literary
                aspects of books.
Library.java -  This class represents a library, which hold a collection of books. Patrons can register at the library
                to be able to check out books, if a copy of the requested book is available.



=============================
=          Design           =
=============================
- Max borrows -
    It would have been possible to assign each Patron object a borrows counter and then on each borrow append this
    counter, and on each return subtract from it. Then, on each borrow attempt it would be possible to compare this
    counter to max books constant, instead of looping over the book array. The run-time complexity would be much better
    (O(1)), but the Patron class would hold vars and methods that actually deal with library issues, and it could hold
    a future problem if Patron can belong to multiple libraries, for instance. So, I sacrificed some efficiency and
    kept this test in Library class, thus looping over the book array (worst case: O(n)).
- Helper methods -
    Some actions regarding books and patrons insertion, validation, etc. seemed quite similar. To avoid writing code
    twice, I defined helper methods to insert book/patrons, to validate and fetch their IDs, and to handle more
    complex issues.



=============================
=  Implementation details   =
=============================
- Store book/patrons -
    Upon construction I created an Object[] array for respective field. Its length is the max number of books/patrons
    defined on object creation. The initial arrays contain null values.
- Insert books/patrons -
    Inserting new object to the array requires finding the first null field, that comes after an existing object. If
    no null fields found, it means the array is full (reached max capacity). To find this first null field, one must go
    over the whole array. It could have been possible to use binary search algorithm, as the array is sorted (new entry
    always comes after an existing entry), but it is also required to check if new object already exists on the array,
    and Object fields are not sorted. In conclusion, I found it necessary to loop over the whole array until found a
    duplicate Object or found first null field (worst case: O(n)).
- Books suggestions -
    Each book gets a score for this patron, based on instructions in the assignment API. After that another method
    compares this book's score to patron's minimal enjoyment threshold, and assumes patron will enjoy the book if
    the score is bigger/equal to patron's minimal enjoyment threshold. The book suggestion method goes over the whole
    books array and seeks an available book (not borrowed) that meets this enjoyment assumption, if found. Once found,
    saves this book's score and index and keep on searching for any other relevant books with higher scores. The method
    uses a loop that breaks once reached null/end of array (worst case: O(n)), and returns the books with highest score.
- Borrow book -
    This method checks few tests before it assigns book to patron: (1) IDs are valid. (2) patron will enjoy book.
    (3) book is available. (4) patron has not reached max borrows. Each test is performed in dedicated method, and *all*
    tests must pass. Tests 1-3 require run-time complexity of O(1), and test 4 (described above) require O(n). So, to
    save efficiency, tests 1-3 are performed before test 4, and if any test fails, the rest of the tests are never
    performed (using & in the conditional, instead of &&). If all tests pass, book is marked as borrowed to this patron.



=============================
=    Answers to questions   =
=============================
No questions for this exercise.
